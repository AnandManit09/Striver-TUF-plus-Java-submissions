class Pair{
    int first;
    int second;

    public Pair(int a,int b){
        this.first=a;
        this.second=b;
    }
    public Pair(){

    }
}
class Solution {
    public int numberOfEnclaves(int[][] grid) {
     
     int n=grid.length;
        int m=grid[0].length;

        boolean[][] visited=new boolean[n][m];
        Queue<Pair> q=new LinkedList<>();

        // pahle boundary walo ko visited mark karo
       for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(i==0 || i==n-1 || j==0 || j==m-1){
                if(grid[i][j]==1){
                    visited[i][j]=true;
                    q.add(new Pair(i,j));
                }
            }
        }
       }
        int[] drow={-1,0,+1,0};
        int[] dcol={0,+1,0,-1};
       while(!q.isEmpty()){

            Pair front=q.remove();
            int roww=front.first;
            int coll=front.second;

            for(int i=0;i<4;i++){
                int nrow=roww+drow[i];
                int ncol=coll+dcol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && visited[nrow][ncol]==false && grid[nrow][ncol]==1){
                    q.add(new Pair(nrow,ncol));
                    visited[nrow][ncol]=true;
                }
            }


       }

       int ans=0;

       for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(grid[i][j]==1 && visited[i][j]==false) ans++;
        }
       }

        return ans;
    }
}
