class Solution {
    public String findOrder(String [] dict, int N, int K) {
        List<Integer>[] adj=new ArrayList[K];

        for(int i=0;i<K;i++){
            adj[i]=new ArrayList<>();
        }

        for(int i=0;i<N-1;i++){
            String s1=dict[i];
            String s2=dict[i+1];
            int leng=Math.min(s1.length(),s2.length());

            for(int itr=0;itr<leng;itr++){

                if(s1.charAt(itr)!=s2.charAt(itr)){
                    adj[s1.charAt(itr) - 'a'].add(s2.charAt(itr)-'a');
                    break;
                }
            }

        }

        List<Integer> topo = topoSort( adj,K);
        
        // To store the answer
        StringBuilder ans = new StringBuilder();
        
        for (int i = 0; i < K; i++) {
            // Add the letter to the result
            ans.append((char) ('a' + topo.get(i)));
            ans.append(' ');
        }
        
        // Return the answer
        return ans.toString();


    }

    private List<Integer> topoSort(List<Integer>[] adj, int n){

        int[] indegree=new int[n];

        for(int i=0;i<n;i++){
            for(int j:adj[i]){
                indegree[j]++;
            }
        }

        Queue<Integer> q=new LinkedList<>();

        for(int i=0;i<n;i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }
        List<Integer> ans=new ArrayList<>();
        while(!q.isEmpty()){
            int node=q.poll();
            ans.add(node);
            for(int it:adj[node]){
                indegree[it]--;

                if(indegree[it]==0){
                    q.add(it);
                }
            }
        }

        return ans;

    }
}
